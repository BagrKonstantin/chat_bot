import telebot
from telebot import types
import sqlite3

bot = telebot.TeleBot('1054926363:AAFIizR6JDjoe4TJtmmocU0zIbiYtLYPWqA')

keyboard_main = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_main.add('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
keyboard_main.add('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')

keyboard_first = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
keyboard_first.add('–í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')

keyboard_with_chose = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
keyboard_with_chose.add('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ')
keyboard_with_chose.add('–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ')
keyboard_with_chose.add('–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ')

keyboard_answer = types.InlineKeyboardMarkup()
key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
keyboard_answer.add(key_yes)
key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
keyboard_answer.add(key_no)

list_pf_spec = ['–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ', '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ']
list_of_gum_prof = ['–Æ—Ä–∏—Å—Ç', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', '–î–∏–∑–∞–π–Ω–µ—Ä', '–≠–∫–æ–Ω–æ–º–∏—Å—Ç', '–ü–µ–¥–∞–≥–æ–≥', '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫', '–î–∏–ø–ª–æ–º–∞—Ç',
                    '–§–æ—Ç–æ–≥—Ä–∞—Ñ', '–ü—Å–∏—Ö–æ–ª–æ–≥', '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç', '–í–∏–¥–µ–æ-–æ–ø–µ—Ä–∞—Ç–æ—Ä', '–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ', '–ö–æ–Ω–¥–∏—Ç–µ—Ä']
list_of_tex_prof = ['–≠–ª–µ–∫—Ç—Ä–∏–∫', '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫', '–¢–æ–∫–∞—Ä—å', '–¢–µ—Ö–Ω–æ–ª–æ–≥', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å', '–°—Ç–æ–ª—è—Ä', '–°–ª–µ—Å–∞—Ä—å-—Å–±–æ—Ä—â–∏–∫',
                    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–ù–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥', '–ú–µ—Ö–∞–Ω–∏–∫', '–ú–æ–Ω—Ç–∞–∂–Ω–∏–∫', '–ë—É—Ä–∏–ª—å—â–∏–∫', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–ö–æ–Ω—Ç—Ä–æ–ª—ë—Ä –û–¢–ö',
                    '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Ç–∞–ª–ª–∞', '–†–∞–¥–∏–æ–∏–Ω–∂–µ–Ω–µ—Ä', '–°–≤—è–∑–∏—Å—Ç']
list_of_gum_tex_prof = ['–Æ—Ä–∏—Å—Ç', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–î–∏–∑–∞–π–Ω–µ—Ä', '–†–∞–¥–∏–æ–∏–Ω–∂–µ–Ω–µ—Ä', '–ü–µ–¥–∞–≥–æ–≥', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫',
                        '–°–≤—è–∑–∏—Å—Ç', '–§–æ—Ç–æ–≥—Ä–∞—Ñ', '–ü—Å–∏—Ö–æ–ª–æ–≥', '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç', '–í–∏–¥–µ–æ-–æ–ø–µ—Ä–∞—Ç–æ—Ä', '–ù–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥', '–ö–æ–Ω–¥–∏—Ç–µ—Ä']
black_list = [799056502]

dictionary_of_users = {}

ban_count = 15


class User:
    def __init__(self, specialization, name):
        self.specialization = specialization
        self.change = False
        self.name = name
        self.ban = False
        self.messages = 0

    def swap(self):
        self.specialization = self.change
        self.change = False

    def update_ban(self):
        if self.messages > ban_count:
            self.ban = True
        else:
            self.messages += 1


def dictionary_update():
    global dictionary_of_users
    con = sqlite3.connect("user_names")
    cur = con.cursor()
    result = cur.execute("SELECT id_in_telegram, type_of_news, info FROM users_id_and_type_of_news").fetchall()

    for info in result:
        if info[0] not in dictionary_of_users.keys():
            dictionary_of_users[info[0]] = User(info[1], info[2])
    con.close()


dictionary_update()


class WrongCategoryName(Exception):
    pass


class PostFormatError(Exception):
    pass


class UserNotInDataBase(Exception):
    pass


bot.send_message(171303452, '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')


@bot.message_handler(commands=['start'])
def start_message(message):
    try:
        tel_id = message.from_user.id
        if tel_id in dictionary_of_users.keys():
            if dictionary_of_users[tel_id].ban:
                return
            else:
                dictionary_of_users[tel_id].update_ban()
        inform = ''
        if message.from_user.first_name:
            inform += message.from_user.first_name + ' '
        if message.from_user.last_name:
            inform += message.from_user.last_name + ' '
        if message.from_user.username:
            inform += message.from_user.username + ' '
        if tel_id not in dictionary_of_users.keys():
            con = sqlite3.connect("user_names")
            cur = con.cursor()
            cur.execute(
                """INSERT INTO users_id_and_type_of_news 
                (id_in_telegram, info) VALUES({},'{}')""".format(
                    tel_id, inform))
            con.commit()
            con.close()
            bot.send_message(message.chat.id, '–ú—ã –≤–Ω–µ—Å–ª–∏ –≤–∞—Å –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö')
            dictionary_update()
            bot.send_message(message.chat.id,
                             '–ü—Ä–∏–≤–µ—Çüåü\n–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ,–∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏–ª–∏' +
                             ' –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å',
                             reply_markup=keyboard_first)
        else:
            if dictionary_of_users[tel_id].specialization:
                bot.send_message(message.chat.id,
                                 '–í—ã —É–∂–µ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {}'.format(
                                     dictionary_of_users[tel_id].specialization),
                                 reply_markup=keyboard_main)
            else:
                bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', reply_markup=keyboard_first)
    except Exception as error:
        print(error.__class__.__name__)


@bot.channel_post_handler(content_types=['text'])
def send_text(message):
    try:
        if '/post' in message.text.split('\n')[0]:
            if len(message.text.split('\n')) == 1:
                raise PostFormatError
            if '–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ' in message.text.split('\n')[0].lower():
                for text in dictionary_of_users.keys():
                    if dictionary_of_users[text].specialization:
                        bot.send_message(text,
                                         '–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {}\n{}'.format(
                                             dictionary_of_users[text].specialization,
                                             '\n'.join(
                                                 message.text.split('\n')[1:])))
                    else:
                        bot.send_message(text,
                                         '–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ\n{}'.format('\n'.join(
                                             message.text.split('\n')[1:])))
            elif '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ' in message.text.split('\n')[0].lower():
                for text in dictionary_of_users.keys():
                    if dictionary_of_users[text].specialization and \
                            dictionary_of_users[text].specialization.lower() != '–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ':
                        bot.send_message(text,
                                         '–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {}\n{}'.format(
                                             dictionary_of_users[text].specialization,
                                             '\n'.join(
                                                 message.text.split('\n')[1:])))
                    else:
                        bot.send_message(text,
                                         '–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ\n{}'.format('\n'.join(
                                             message.text.split('\n')[1:])))
            elif '–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ' in message.text.split('\n')[0].lower():
                for text in dictionary_of_users.keys():
                    if dictionary_of_users[text].specialization and \
                            dictionary_of_users[text].specialization.lower() != '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ':
                        bot.send_message(text,
                                         '–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {}\n{}'.format(
                                             dictionary_of_users[text].specialization,
                                             '\n'.join(
                                                 message.text.split('\n')[1:])))
                    else:
                        bot.send_message(text,
                                         '–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ\n{}'.format('\n'.join(
                                             message.text.split('\n')[1:])))
            else:
                raise WrongCategoryName

        elif '/prof' in message.text:
            for text in dictionary_of_users.keys():
                if dictionary_of_users[text].specialization == '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ':
                    bot.send_message(text, '\n'.join(list_of_gum_prof))
                elif dictionary_of_users[text].specialization == '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ':
                    bot.send_message(text, '\n'.join(list_of_tex_prof))
                else:
                    bot.send_message(text, '\n'.join(list_of_gum_tex_prof))
        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /post –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π @working_specialty_bot')
    except WrongCategoryName:
        bot.send_message(message.chat.id,
                         '–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –¥–æ—Å—Ç—É–ø–Ω—ã:\n{} @working_specialty_bot'.format(
                             '\n'.join(list_pf_spec)))
    except PostFormatError:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
    except Exception as error:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: {} @working_specialty_bot'.format(error.__class__.__name__))


@bot.channel_post_handler(content_types=['video'])
def send_video(message):
    try:
        if '/post' in message.caption:
            if '–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ' in message.caption.lower():
                for text in dictionary_of_users.keys():
                    bot.send_video(text, message.video.file_id)
            elif '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ' in message.caption.lower():
                for text in dictionary_of_users.keys():
                    if dictionary_of_users[text].specialization.lower() != '–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ':
                        bot.send_video(text, message.video.file_id)
            elif '–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ' in message.caption.lower():
                for text in dictionary_of_users.keys():
                    if dictionary_of_users[text].specialization.lower() != '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ':
                        bot.send_video(text, message.video.file_id)
            else:
                raise WrongCategoryName
        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ /post –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π @working_specialty_bot')
    except WrongCategoryName:
        bot.send_message(message.chat.id,
                         '–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –¥–æ—Å—Ç—É–ø–Ω—ã:\n{} @working_specialty_bot'.format(
                             '\n'.join(list_pf_spec)))
    except PostFormatError:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
    except Exception as error:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: {} @working_specialty_bot'.format(error.__class__.__name__))


@bot.message_handler(content_types=['text'])
def send_text(message):
    tel_id = message.from_user.id
    try:
        if tel_id not in dictionary_of_users.keys():
            raise UserNotInDataBase
        if dictionary_of_users[tel_id].ban:
            return
        else:
            dictionary_of_users[tel_id].update_ban()
        print(message.text, dictionary_of_users[tel_id].name, dictionary_of_users[tel_id].messages)
        if message.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' or message.text.lower() == '–≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':
            bot.send_message(message.chat.id, '–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å?',
                             reply_markup=keyboard_with_chose)
        elif message.text.lower() == '–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ':
            dictionary_of_users[tel_id].change = list_pf_spec[0]
            bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?',
                             reply_markup=keyboard_answer)
        elif message.text.lower() == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ':
            dictionary_of_users[tel_id].change = list_pf_spec[1]
            bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?',
                             reply_markup=keyboard_answer)
        elif message.text.lower() == '–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ':
            dictionary_of_users[tel_id].change = list_pf_spec[2]
            bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?',
                             reply_markup=keyboard_answer)
        elif message.text.lower() == '—è —Ç–µ–±—è –ª—é–±–ª—é':
            bot.send_sticker(message.chat.id, 'CAADAgADZgkAAnlc4gmfCor5YbYYRAI')
        elif message.text.lower() == '–ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':
            try:
                if dictionary_of_users[tel_id].specialization:
                    bot.send_message(message.chat.id, dictionary_of_users[tel_id].specialization)
                else:
                    raise KeyError
            except KeyError:
                bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', reply_markup=keyboard_first)
        else:
            bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é')
    except UserNotInDataBase:
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start')
    except Exception as error:
        print(error.__class__.__name__)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    tel_id = call.message.chat.id
    try:
        if call.data == "yes":
            if tel_id not in dictionary_of_users.keys():
                raise UserNotInDataBase
            elif dictionary_of_users[tel_id].change != dictionary_of_users[tel_id].specialization:
                con = sqlite3.connect("user_names")
                cur = con.cursor()
                cur.execute(
                    "UPDATE users_id_and_type_of_news SET type_of_news = '{}' WHERE id_in_telegram = {}".format(
                        dictionary_of_users[tel_id].change, tel_id))
                dictionary_of_users[tel_id].swap()
                con.commit()
                con.close()
                bot.send_message(call.message.chat.id,
                                 '–•–æ—Ä–æ—à–æ, –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é {}'.format(
                                     dictionary_of_users[tel_id].specialization),
                                 reply_markup=keyboard_main)
                if dictionary_of_users[tel_id].specialization.lower() != '–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ':
                    bot.send_message(call.message.chat.id,
                                     '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π')
                    bot.send_video(call.message.chat.id,
                                   'BAACAgIAAx0CVANKZAADoV5Wf_xLLMkF2WLQ5Qkx0IT7b64bAALfBAACNYywSlV9_MST0M9UGAQ')
            else:
                bot.send_message(call.message.chat.id, '–£ –≤–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ –¥–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                                 reply_markup=keyboard_main)
        elif call.data == "no":
            bot.send_message(call.message.chat.id, '–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å',
                             reply_markup=keyboard_main)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except UserNotInDataBase:
        bot.send_message(call.message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start')
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ /start')
        print(error.__class__.__name__)


@bot.message_handler(content_types=['sticker'])
def sticker_id(message):
    print(message)


try:
    bot.polling(none_stop=True, interval=0)
except Exception as er:
    print(er.__class__.__name__)
